package SwordToOffer.NK41.FindContinuousSequence;

import java.util.*;


/*
*  滑窗
*
* 输出所有和为S的连续正数序列。
* 序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序
*
*
* 小明很喜欢数学,有一天他在做数学作业时,要求计算出9--16的和,他马上就写出了正确答案是100。
* 但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。
* 没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。
* */
class Solution {
    public ArrayList<ArrayList<Integer>> FindContinuousSequence(int sum) {
        ArrayList<ArrayList<Integer>> totalList = new ArrayList<>();
        if (sum < 3){
            return totalList;
        }
        int limit = sum / 2;
        int low = 1;
        int high = 2;
        while (low < high){
            int subSum = (low + high) * (high-low+1) / 2;
            if (subSum == sum){
                ArrayList<Integer> innerList = new ArrayList<>();
                for (int i = low;i<=high;i++){
                    innerList.add(i);
                }
                totalList.add(innerList);
                low++;
            }else if (subSum < sum){
                high++;
            }else {
                low++;
            }
        }
        return totalList;
    }
}
