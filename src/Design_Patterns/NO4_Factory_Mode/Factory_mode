简单工厂模式是由一个对象负责所有具体类的实例化(createPizza方法放在类simpleFactory中)，
通过对PizzaStore做一些小转变，变成又一群子类来负责实例化
(将createPizza方法放入PizzaStore中并变成抽象的，让具体类去实现，允许子类决定怎么制作pizza)
orderPizza方法传入了一个Pizza类型，在方法内使用了createPizza方法来制作Pizza，并用bake,box等方法来加工包装Pizza
而createPizza则根据传入的Pizza类型创建不同的Pizza对象，不同的Pizza对象的bake和box等方法也不同


简单工厂把全部的事情放在一个地方都处理完了，工厂方法却是创建一个框架，让子类决定要如何实现。
"工厂"将创建对象的代码集中在一个对象或者方法中，可以避免代码中的重复，并且更方便以后的维护。

依赖倒置，别从顶端开始，别让Pizza店理会那些具体的Pizza类


抽象工厂模式
这个模式可以创建产品的家族，提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类

新增的原料工厂直接传进具体Pizza的构造器中，然后在Pizza的prepare方法中将原料加上去

抽象工厂：当你需要创建产品家族和想让制造的相关产品集合起来时，可以使用抽象工厂

工厂方法：可以把客户代码从需要实例化的具体类中解耦。或者你目前不知道将来需要实例化哪些具体类时，也可以用。
